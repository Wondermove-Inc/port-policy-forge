import {
  EdgeStatus,
  NodeKind,
  NodeStatus,
} from "@/components/modules/networkgraph/types";

export const clusters = [
  { id: "cluster1", name: "Cluster1", type: "aks" },
  { id: "cluster2", name: "Cluster2123213123", type: "gke" },
];

export const namespaces = [
  { id: "namespace1", name: "Namespace1", clusterId: "cluster1" },
  { id: "namespace2", name: "Namespace212312312321", clusterId: "cluster1" },
  { id: "test1", name: "Test1", clusterId: "cluster2" },
  { id: "test2", name: "Test2", clusterId: "cluster2" },
];

export const workloadList = [
  {
    id: "1",
    name: "Workload Name 1",
    type: "Type",
    unconnectedPort: 2,
    idlePort: 8,
    activePort: 8,
    errorPort: 6,
    closedPortAttempted: 0,
  },
  {
    id: "2",
    name: "Workload Name 2",
    type: "Type",
    unconnectedPort: 3,
    idlePort: 7,
    activePort: 8,
    errorPort: 9,
    closedPortAttempted: 1,
  },
  {
    id: "3",
    name: "Workload Name 3",
    type: "Type",
    unconnectedPort: 0,
    idlePort: 0,
    activePort: 0,
    errorPort: 0,
    closedPortAttempted: 2,
  },
  {
    id: "4",
    name: "Workload Name 4",
    type: "Type",
    unconnectedPort: 0,
    idlePort: 0,
    activePort: 0,
    errorPort: 0,
    closedPortAttempted: 2,
  },
  {
    id: "5",
    name: "Workload Name 5",
    type: "Type",
    unconnectedPort: 0,
    idlePort: 0,
    activePort: 0,
    errorPort: 0,
    closedPortAttempted: 2,
  },
  {
    id: "6",
    name: "Workload Name 6",
    type: "Type",
    unconnectedPort: 0,
    idlePort: 0,
    activePort: 0,
    errorPort: 0,
    closedPortAttempted: 2,
  },
  {
    id: "7",
    name: "Workload Name 7",
    type: "Type",
    unconnectedPort: 0,
    idlePort: 0,
    activePort: 0,
    errorPort: 0,
    closedPortAttempted: 2,
  },
  {
    id: "8",
    name: "Workload Name 8",
    type: "Type",
    unconnectedPort: 0,
    idlePort: 0,
    activePort: 0,
    errorPort: 0,
    closedPortAttempted: 2,
  },
  {
    id: "9",
    name: "Workload Name 9",
    type: "Type",
    unconnectedPort: 0,
    idlePort: 0,
    activePort: 0,
    errorPort: 0,
    closedPortAttempted: 2,
  },
  {
    id: "10",
    name: "Workload Name 10",
    type: "Type",
    unconnectedPort: 0,
    idlePort: 0,
    activePort: 0,
    errorPort: 0,
    closedPortAttempted: 2,
  },
  {
    id: "11",
    name: "Workload Name 11",
    type: "Type",
    unconnectedPort: 0,
    idlePort: 0,
    activePort: 0,
    errorPort: 0,
    closedPortAttempted: 2,
  },
  {
    id: "12",
    name: "Workload Name 12",
    type: "Type",
    unconnectedPort: 0,
    idlePort: 0,
    activePort: 0,
    errorPort: 0,
    closedPortAttempted: 2,
  },
  {
    id: "13",
    name: "Workload Name 13",
    type: "Type",
    unconnectedPort: 0,
    idlePort: 0,
    activePort: 0,
    errorPort: 0,
    closedPortAttempted: 2,
  },
  {
    id: "14",
    name: "Workload Name 14",
    type: "Type",
    unconnectedPort: 0,
    idlePort: 0,
    activePort: 0,
    errorPort: 0,
    closedPortAttempted: 2,
  },
  {
    id: "15",
    name: "Workload Name 15",
    type: "Type",
    unconnectedPort: 0,
    idlePort: 0,
    activePort: 0,
    errorPort: 0,
    closedPortAttempted: 2,
  },
  {
    id: "16",
    name: "Workload Name 16",
    type: "Type",
    unconnectedPort: 0,
    idlePort: 0,
    activePort: 0,
    errorPort: 0,
    closedPortAttempted: 2,
  },
  {
    id: "17",
    name: "Workload Name 17",
    type: "Type",
    unconnectedPort: 0,
    idlePort: 0,
    activePort: 0,
    errorPort: 0,
    closedPortAttempted: 2,
  },
  {
    id: "18",
    name: "Workload Name 18",
    type: "Type",
    unconnectedPort: 0,
    idlePort: 0,
    activePort: 0,
    errorPort: 0,
    closedPortAttempted: 2,
  },
  {
    id: "19",
    name: "Workload Name 19",
    type: "Type",
    unconnectedPort: 0,
    idlePort: 0,
    activePort: 0,
    errorPort: 0,
    closedPortAttempted: 2,
  },
  {
    id: "20",
    name: "Workload Name 20",
    type: "Type",
    unconnectedPort: 0,
    idlePort: 0,
    activePort: 0,
    errorPort: 0,
    closedPortAttempted: 2,
  },
];

export const exampleWorkload = {
  uuid: "7431bb4f-cae8-4dbe-a542-d6f52c893271",
  workloadName: "demo workload-1",
  kind: NodeKind.DEPLOYMENT,
  stats: {
    active: 2,
    unconnected: 8079,
    idle: 1,
    error: 0,
    attempted: 2,
    latencyRtt: 1.39,
    throughput: 469.89,
  },
  ports: {
    inbound: {
      open: [
        {
          id: 0,
          isRange: true,
          portNumber: null,
          portRange: {
            start: "0",
            end: "4999",
          },
          status: 0,
          direction: "inbound",
          source: null,
          access: 0,
          isOpen: true,
          risk: 0,
          type: "internal",
          count: null,
          lastConnection: null,
          lastSrcIp: null,
          lastConnectionLog: null,
        },
        {
          id: 1,
          isRange: false,
          portNumber: 5000,
          portRange: null,
          status: 1,
          direction: "inbound",
          source: null,
          access: 1,
          isOpen: true,
          risk: 0,
          type: "internal",
          count: null,
          lastConnection: "2023-02-21T11:19:22+09:00",
          lastSrcIp: "10.10.1.19",
          lastConnectionLog: "Connection Log",
        },
        {
          id: 0,
          isRange: true,
          portNumber: null,
          portRange: {
            start: "5001",
            end: "8079",
          },
          status: 0,
          direction: "inbound",
          source: null,
          access: 3,
          isOpen: true,
          risk: 0,
          type: "internal",
          count: null,
          lastConnection: null,
          lastSrcIp: null,
          lastConnectionLog: null,
        },
        {
          id: 2,
          isRange: false,
          portNumber: 8080,
          portRange: null,
          access: 0,
          status: 2,
          direction: "inbound",
          source: [
            {
              ip: "192.168.1.100",
              port: 51234,
              comment:
                "Working on deploying a front-end application, making it accessible only from an internal test server.",
              createdAt: "2023-02-21T11:19:22+09:00",
            },
            {
              ip: "192.168.1.101",
              port: 51234,
              comment:
                "Working on deploying a front-end application, making it accessible only from an internal test server.",
              createdAt: "2023-02-21T11:19:22+09:00",
            },
          ],
          isOpen: true,
          risk: 0,
          type: "internal",
          count: null,
          lastConnection: "2022-02-21T11:19:22+09:00",
          lastSrcIp: "10.10.1.19",
          lastConnectionLog: "Connection Log",
        },
      ],
      closed: [
        {
          id: 5,
          isRange: false,
          portNumber: 50051,
          portRange: null,
          status: EdgeStatus.SYSTEM,
          direction: "inbound",
          source: [
            {
              ip: "192.168.1.100",
              port: 51234,
            },
          ],
          isOpen: false,
          risk: 2,
          type: "internal",
          count: 10,
          lastConnection: "2023-02-21T11:19:22+09:00",
          lastSrcIp: "10.10.1.19",
          lastConnectionLog: "Connection Log",
        },
        {
          id: 6,
          isRange: false,
          portNumber: 50052,
          portRange: null,
          status: EdgeStatus.SYSTEM,
          direction: "inbound",
          source: [
            {
              ip: "192.168.1.100",
              port: 51234,
            },
          ],
          isOpen: false,
          risk: 1,
          type: "internal",
          count: 4,
          lastConnection: "2023-02-21T11:19:22+09:00",
          lastSrcIp: "10.10.1.19",
          lastConnectionLog: "Connection Log",
        },
      ],
    },
    outbound: {
      open: [
        {
          id: 7,
          isRange: false,
          portNumber: 9000,
          portRange: null,
          status: 0,
          access: 0,
          direction: "outbound",
          source: [
            {
              ip: "10.0.0.1",
              port: 12345,
              comment:
                "Working on deploying a front-end application, making it accessible only from an internal test server.",
              createdAt: "2023-02-21T11:19:22+09:00",
            },
          ],
          isOpen: true,
          risk: 0,
          type: "external",
          count: null,
          lastConnection: "2023-02-21T12:00:00+09:00",
          lastSrcIp: "10.0.0.2",
          lastConnectionLog: "Outbound connection log",
        },
      ],
      closed: [
        {
          id: 8,
          isRange: false,
          portNumber: 9001,
          portRange: null,
          status: EdgeStatus.SYSTEM,
          direction: "outbound",
          source: [
            {
              ip: "10.0.0.1",
              port: 12345,
            },
          ],
          isOpen: false,
          risk: 2,
          type: "external",
          count: 5,
          lastConnection: "2023-02-21T12:05:00+09:00",
          lastSrcIp: "10.0.0.2",
          lastConnectionLog: "Outbound closed connection log",
        },
      ],
    },
  },
};

export const workloadMap = [
  {
    uuid: "111",
    workloadName: "workload-1",
    kind: NodeKind.DEPLOYMENT,
    status: NodeStatus.COMPLETE_INITIAL_SETUP,
    from: [
      {
        workloadId: "222",
        status: EdgeStatus.IDLE,
      },
    ],
    to: [
      {
        workloadId: "444",
        status: 2,
      },
      {
        workloadId: "555",
        status: EdgeStatus.ERROR,
      },
    ],
    inbound: {
      stats: {
        active: 10,
        unconnected: 5,
        error: 5,
        idle: 10,
        attempted: 40,
      },
    },
    outbound: {
      stats: {
        active: 10,
        unconnected: 5,
        error: 5,
        idle: 10,
        attempted: 40,
      },
    },
  },
  {
    uuid: "222",
    workloadName: "-ad-service",
    kind: NodeKind.JOB,
    status: NodeStatus.COMPLETE_INITIAL_SETUP,
    from: [],
    to: [],
    inbound: {
      stats: {
        active: 10,
        unconnected: 5,
        error: 5,
        idle: 0,
        attempted: 40,
      },
    },
    outbound: {
      stats: {
        active: 10,
        unconnected: 5,
        error: 5,
        idle: 0,
        attempted: 40,
      },
    },
  },
  {
    uuid: "333",
    workloadName: "workload-1-1",
    kind: NodeKind.DEPLOYMENT,
    from: [],
    to: [
      {
        workloadId: "222",
        status: EdgeStatus.SYSTEM,
      },
    ],
    inbound: {
      stats: {
        active: 10,
        unconnected: 5,
        error: 0,
        idle: 10,
        attempted: 0,
      },
    },
    outbound: {
      stats: {
        active: 0,
        unconnected: 0,
        error: 0,
        idle: 2,
        attempted: 0,
      },
    },
  },
  {
    uuid: "444",
    workloadName: "workload-example-1",
    kind: NodeKind.DEMONSET,
    status: NodeStatus.COMPLETE_INITIAL_SETUP,
    from: [],
    to: [
      {
        workloadId: "333",
        status: EdgeStatus.SYSTEM,
      },
    ],
  },
  {
    uuid: "555",
    workloadName: "workload-example-2",
    kind: NodeKind.DEPLOYMENT,
    status: NodeStatus.COMPLETE_INITIAL_SETUP,
    from: [],
    to: [
      {
        workloadId: "444",
        status: EdgeStatus.SYSTEM,
      },
    ],
  },
  {
    uuid: "666",
    workloadName: "workload-example-3",
    kind: NodeKind.REPLICASET,
    status: NodeStatus.COMPLETE_INITIAL_SETUP,
    from: [],
    to: [
      {
        workloadId: "444",
        status: EdgeStatus.SYSTEM,
      },
    ],
  },
  {
    uuid: "777",
    workloadName: "workload-example-4",
    kind: NodeKind.CRONJOB,
    status: NodeStatus.COMPLETE_INITIAL_SETUP,
    from: [],
    to: [
      {
        workloadId: "444",
        status: EdgeStatus.SYSTEM,
      },
    ],
  },
  {
    uuid: "888",
    workloadName: "workload-example-5",
    kind: NodeKind.JOB,
    status: NodeStatus.COMPLETE_INITIAL_SETUP,
    from: [
      {
        workloadId: "777",
        status: EdgeStatus.SYSTEM,
      },
    ],
    to: [],
  },
  {
    uuid: "999",
    workloadName: "workload-example-6",
    status: NodeStatus.COMPLETE_INITIAL_SETUP,
    kind: NodeKind.STATEFULSET,
    from: [
      {
        workloadId: "666",
        status: EdgeStatus.SYSTEM,
      },
    ],
    to: [],
  },
  {
    uuid: "1000",
    workloadName: "workload-example-7",
    status: NodeStatus.BEFORE_INITIAL_SETUP,
    kind: NodeKind.ETC,
    from: [
      {
        workloadId: "111",
        status: EdgeStatus.ATTEMPT,
      },
    ],
    to: [],
  },
  {
    uuid: "1111",
    workloadName: "workload-example-8",
    status: NodeStatus.COMPLETE_INITIAL_SETUP,
    kind: NodeKind.EXTERNAL,
    from: [
      {
        workloadId: "222",
        status: EdgeStatus.SYSTEM,
      },
    ],
    to: [],
  },
  {
    uuid: "2222",
    workloadName: "workload-example-9",
    status: NodeStatus.BEFORE_INITIAL_SETUP,
    kind: NodeKind.DEPLOYMENT,
    from: [
      {
        workloadId: "444",
        status: EdgeStatus.SYSTEM,
      },
    ],
    to: [],
  },
  {
    uuid: "3333",
    workloadName: "workload-example-10",
    status: NodeStatus.COMPLETE_INITIAL_SETUP,
    kind: NodeKind.DEPLOYMENT,
    from: [],
    to: [
      {
        workloadId: "555",
        status: EdgeStatus.SYSTEM,
      },
    ],
  },
];
